name: CI

on: [push, pull_request]

jobs:
  download-zig:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux, windows]
        arch: [x86_64, aarch64]

    outputs:
      artifact_name: ${{ steps.set-artifact-name.outputs.name }}

    steps:
      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Get latest Zig version
        id: get-version
        run: |
          curl -s https://ziglang.org/download/index.json > v.json
          VERSION=$(node -e "let v = JSON.parse(require('fs').readFileSync('./v.json')); process.stdout.write(Object.keys(v)[1]);")
          echo "zig_version=$VERSION" >> $GITHUB_OUTPUT

      - name: Set archive info
        id: set-artifact-name
        run: |
          FILE_NAME="zig-${{ matrix.platform }}-${{ matrix.arch}}-${{ steps.get-version.outputs.zig_version }}"
          EXT="tar.xz"
          [[ ${{ matrix.platform }} == "windows" ]] && EXT="zip"

          echo "file=$FILE_NAME.$EXT" >> $GITHUB_OUTPUT
          echo "name=zig-${{ matrix.platform }}-${{ matrix.arch }}" >> $GITHUB_OUTPUT

      - name: Download zig
        run: |
          curl -LO "https://ziglang.org/download/${{ steps.get-version.outputs.zig_version }}/${{ steps.set-artifact-name.outputs.file }}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.set-artifact-name.outputs.name }}
          path: ${{ steps.set-artifact-name.outputs.file }}
          overwrite: true
  create-engine:
    needs: download-zig
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux, windows]
        arch: [x86_64]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Set archive info
        id: set-archive-info
        run: |
          NAME="zig-${{ matrix.platform }}-${{ matrix.arch }}"
          PATH="zig.zip"
          
          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "path=$PATH" >> $GITHUB_OUTPUT
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ steps.set-archive-info.outputs.name }}
          path: '.'

      - name: Prepare folder structure
        run: |
          mkdir -p ./__dist/{zig,engine,atomix}

      - name: Extract artifact archive (Windows)
        if: matrix.platform == 'windows'
        run: |
          mkdir -p ./__tmp
          unzip -q "./zig-${{ matrix.platform }}-${{ matrix.arch }}-*" -d "__tmp"
          shopt -s dotglob
          mv ./__tmp/*/* ./__dist/zig/
          rm -rf ./__tmp

      - name: Extract artifact archive (Linux)
        if: matrix.platform == 'linux'
        run: |
          ls -ls
          tar --strip-components=1 -xf ./zig-${{ matrix.platform }}-${{ matrix.arch }}-*.xz -C ./__dist/zig

      - name: Build atomixc
        run: |
          cd ./atomixc
          npm install -g typescript
          npm install
          
          tsc
          cp ./dist/* ../__dist/atomixc

      - name: Build engine
        run: |
          mkdir ./__dist/engine/{core,modules,debug,release}
          # TODO implement correct build script
          mkdir ./__dist/engine/modules/core
          cd atomix
          cp ./core/*.c ../__dist/engine/core
          cp ./core/*.h ../__dist/engine/core
          
          cp ./debug/*.c ../__dist/engine/debug
          cp ./debug/*.h ../__dist/engine/debug
          
          cp ./prod/*.c ../__dist/engine/release
          cp ./prod/*.h ../__dist/engine/release
          
          cp ./modules/core/*.c ../__dist/engine/modules/core
          cp ./modules/core/*.h ../__dist/engine/modules/core

      - name: Pack artifact
        id: output-info
        run:
          NAME="atomix-${{ matrix.platform }}-${{ matrix.arch }}"
          PATH="$NAME.zip"
          cd ./__dist
          zip -r "../$PATH" .
          cd ..
          
          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "path=$PATH" >> $GITHUB_OUTPUT
      - name: Upload build
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.output-info.outputs.name }}
          path: ${{ steps.output-info.outputs.path }}
          overwrite: true

#  build-atomix:
#    runs-on: ${{ matrix.os }}
#    strategy:
#      matrix:
#        os: [ ubuntu-latest, windows-latest ]
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v4
#
#      - name: Setup CMake
#        uses: lukka/get-cmake@latest
#
#      - name: Setup NodeJS
#        uses: actions/setup-node@v4
#        with:
#          node-version: '22'
#
#      - name: Install dependencies
#        if: runner.os == 'Linux'
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y build-essential
#
#      - name: Configure and build atomix project
#        if: runner.os == 'Linux'
#        run: |
#          mkdir -p atomix/cmake-build-debug
#          cd atomix
#          cmake -S . -B cmake-build-debug
#          cmake --build cmake-build-debug --config Debug --target atomix -j 14
#
#      - name: Install dependencies
#        if: runner.os == 'Windows'
#        uses: msys2/setup-msys2@v2
#        with:
#          msystem: MINGW64
#          install: mingw-w64-x86_64-gcc
#
#      - name: Configure and build atomix project
#        if: runner.os == 'Windows'
#        run: |
#          mkdir -p atomix/cmake-build-debug
#          cd atomix
#          cmake -G "Ninja" -DCMAKE_C_COMPILER=gcc -S . -B cmake-build-debug
#          cmake --build cmake-build-debug --config Debug --target atomix -j 14
#
#      - name: Install TypeScript
#        run: npm install -g typescript
#
#      - name: Install dependencies
#        run: |
#          cd atomixc
#          npm install
#
#      - name: Build atomixc project
#        run: |
#          cd atomixc
#          npx tsc
#
#      - name: Run tests
#        run: |
#          cd tests
#          node ./suite.js