name: CI

on: [push, pull_request]

jobs:
  download-zig:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        arch: [x64, arm64]

    outputs:
      artifact_name: ${{ steps.set-artifact-name.outputs.name }}

    steps:
      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Get latest Zig version
        id: get-version
        run: |
          INDEX_JSON=$(curl -s https://ziglang.org/download/index.json)
          VERSION=$(node -e "let versions = JSON.parse('$INDEX_JSON'); process.stdout.write(Object.keys(versions)[1]);")
          echo "zig_version=$VERSION" >> $GITHUB_OUTPUT

      - name: Set platform and arch
        id: set-platform
        run: |
          case "${{ matrix.os }}" in
            ubuntu-latest) 
              PLATFORM="linux" 
              ;;
            windows-latest) 
              PLATFORM="windows"
              ;;
          esac
          case "${{ matrix.arch }}" in
            x64) 
              ARCH="x86_64" 
              ;;
            arm64) 
              ARCH="aarch64"
              ;;
          esac
          
          echo "platform=$PLATFORM" >> $GITHUB_OUTPUT
          echo "arch=$ARCH" >> $GITHUB_OUTPUT

      - name: Set archive info
        id: set-artifact-name
        run: |
          FILE_NAME="zig-${{ steps.set-platform.outputs.platform }}-${{ steps.set-platform.outputs.arch }}-${{ steps.get-version.outputs.zig_version }}"
          EXT="tar.xz"
          [[ ${{ matrix.os }} == "windows-lates" ]] && EXT="zip"
        
          echo "file=$FILE_NAME.$EXT" >> $GITHUB_OUTPUT
          echo "name=zig-toolchain-${{ matrix.os }}-${{ matrix.arch }}" >> $GITHUB_OUTPUT

      - name: Download zig
        run: |
          curl -LO "https://ziglang.org/download/${{ steps.get-version.outputs.zig_version }}/${{ steps.set-artifact-name.outputs.file }}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.set-artifact-name.outputs.name }}
          path: ${{ steps.set-artifact-name.outputs.file }}

#
#  build-atomix:
#    runs-on: ${{ matrix.os }}
#    strategy:
#      matrix:
#        os: [ ubuntu-latest, windows-latest ]
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v4
#
#      - name: Setup CMake
#        uses: lukka/get-cmake@latest
#
#      - name: Setup NodeJS
#        uses: actions/setup-node@v4
#        with:
#          node-version: '22'
#
#      - name: Install dependencies
#        if: runner.os == 'Linux'
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y build-essential
#
#      - name: Configure and build atomix project
#        if: runner.os == 'Linux'
#        run: |
#          mkdir -p atomix/cmake-build-debug
#          cd atomix
#          cmake -S . -B cmake-build-debug
#          cmake --build cmake-build-debug --config Debug --target atomix -j 14
#
#      - name: Install dependencies
#        if: runner.os == 'Windows'
#        uses: msys2/setup-msys2@v2
#        with:
#          msystem: MINGW64
#          install: mingw-w64-x86_64-gcc
#
#      - name: Configure and build atomix project
#        if: runner.os == 'Windows'
#        run: |
#          mkdir -p atomix/cmake-build-debug
#          cd atomix
#          cmake -G "Ninja" -DCMAKE_C_COMPILER=gcc -S . -B cmake-build-debug
#          cmake --build cmake-build-debug --config Debug --target atomix -j 14
#
#      - name: Install TypeScript
#        run: npm install -g typescript
#
#      - name: Install dependencies
#        run: |
#          cd atomixc
#          npm install
#
#      - name: Build atomixc project
#        run: |
#          cd atomixc
#          npx tsc
#
#      - name: Run tests
#        run: |
#          cd tests
#          node ./suite.js